import tkinter as tk
from tkinter import messagebox, ttk
from tkcalendar import Calendar
import datetime
import pyodbc
import winsound
from pystray import Icon, MenuItem, Menu
from PIL import Image, ImageDraw
import threading

class ReminderApp:
    def __init__(self, root):
        self.root = root
        self.root.protocol("WM_DELETE_WINDOW", self.hide_window)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.title("–ö–∞–ª–µ–Ω–¥–∞—Ä –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏")
        self.root.geometry("600x700")
        self.root.resizable(False, False)
        self.is_dark_mode = False

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQL Server —á–µ—Ä–µ–∑ Windows Authentication
        try:
            self.conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};'
                                       'SERVER=DESKTOP-QQAOEK4;'  # –ò–º—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                                       'DATABASE=Calendar;'        # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                                       'Trusted_Connection=yes;'   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ Windows
                                       'Encrypt=yes;'              # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                                       'TrustServerCertificate=yes;')  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            self.cursor = self.conn.cursor()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        except pyodbc.Error as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.root.quit()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.create_table()

        # –°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        self.root.configure(bg="#d4e8d4")  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(root, text="üìÖ –ú—ñ–π –ö–∞–ª–µ–Ω–¥–∞—Ä", font=("Helvetica", 20, "bold"), bg="#4CAF50", fg="white")
        header.pack(fill="x", pady=10)

        # –†–∞–º–∫–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        self.cal_frame = tk.Frame(root, bg="#d4e8d4")
        self.cal_frame.pack(pady=10)
        self.cal = Calendar(
            self.cal_frame, 
            selectmode="day", 
            date_pattern="yyyy-mm-dd",
            locale="uk",
            background="lightblue", 
            foreground="black", 
            bordercolor="lightblue"
        )
        self.cal.pack()

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        self.today_date = datetime.date.today()
        self.cal.calevent_create(self.today_date, "–°—å–æ–≥–æ–¥–Ω—ñ", "today")

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏–π
        self.event_frame = tk.Frame(root, bg="#d4e8d4")
        self.event_frame.pack(pady=10)

        self.event_label = tk.Label(self.event_frame, text="–û–ø–∏—Å –ø–æ–¥—ñ—ó:", font=("Helvetica", 12), bg="#d4e8d4")
        self.event_label.grid(row=0, column=0, padx=5, pady=5)

        self.event_entry = ttk.Entry(self.event_frame, width=30, font=("Helvetica", 12))
        self.event_entry.grid(row=0, column=1, padx=5)
        self.event_entry.insert(0, "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ–¥—ñ—ó")

        # –¢–∏–ø –ø–æ–¥—ñ—ó (–≤–∞–∂–Ω–æ—Å—Ç—å)
        self.event_type_label = tk.Label(self.event_frame, text="–¢–∏–ø –ø–æ–¥—ñ—ó:", font=("Helvetica", 12), bg="#d4e8d4")
        self.event_type_label.grid(row=1, column=0, padx=5, pady=5)

        self.event_type = ttk.Combobox(self.event_frame, values=["–ó–≤–∏—á–∞–π–Ω–∞", "–í–∞–∂–ª–∏–≤–∞", "–¢–µ—Ä–º—ñ–Ω–æ–≤–∞"], font=("Helvetica", 12))
        self.event_type.grid(row=1, column=1, padx=5)
        self.event_type.set("–ó–≤–∏—á–∞–π–Ω–∞")

        # –ö–Ω–æ–ø–∫–∏
        self.button_frame = tk.Frame(root, bg="#d4e8d4")
        self.button_frame.pack(pady=10)

        self.add_button = ttk.Button(self.button_frame, text="‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é", command=self.add_event)
        self.add_button.grid(row=0, column=0, padx=10, pady=5)

        self.show_button = ttk.Button(self.button_frame, text="üìú –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–¥—ñ—ó", command=self.show_events)
        self.show_button.grid(row=0, column=1, padx=10, pady=5)

        self.remove_button = ttk.Button(self.button_frame, text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é", command=self.remove_event)
        self.remove_button.grid(row=0, column=2, padx=10, pady=5)

        self.edit_button = ttk.Button(self.button_frame, text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—é", command=self.edit_event)
        self.edit_button.grid(row=1, column=0, padx=10, pady=5)

        self.complete_button = ttk.Button(self.button_frame, text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ–¥—ñ—é", command=self.complete_event)
        self.complete_button.grid(row=1, column=1, padx=10, pady=5)

        self.save_button = ttk.Button(self.button_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏", command=self.save_changes)
        self.save_button.grid(row=1, column=2, padx=10, pady=5)

        # –°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π
        self.list_frame = tk.Frame(root, bg="#e6ffe6", bd=2, relief="groove")
        self.list_frame.pack(fill="both", expand=True, padx=10, pady=10)

        self.list_label = tk.Label(self.list_frame, text="–°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π:", bg="#e6ffe6", font=("Helvetica", 14))
        self.list_label.pack(anchor="nw", padx=5, pady=5)

        self.event_list = tk.Listbox(
            self.list_frame, 
            font=("Helvetica", 12), 
            bg="#f9fff9",  
            selectbackground="#b3ffb3",  
            selectforeground="black", 
            height=10
        )
        self.event_list.pack(fill="both", expand=True, padx=5, pady=5)

        # –í–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.root.after(1000, self.daily_check)

    def create_table(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.cursor.execute(""" 
        IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Events' AND xtype='U')
        CREATE TABLE Events (
            id INT PRIMARY KEY IDENTITY(1,1),
            event_date DATE,
            event_description NVARCHAR(255),
            event_type NVARCHAR(50),
            completed BIT
        )
        """)
        self.conn.commit()

    def add_event(self):
        date = self.cal.get_date()
        event = self.event_entry.get()
        event_type = self.event_type.get()

        if date and event and event.strip() != "":
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQL Server
            self.cursor.execute(""" 
                INSERT INTO Events (event_date, event_description, event_type, completed) 
                VALUES (?, ?, ?, ?)
            """, (date, event, event_type, False))
            self.conn.commit()

            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–¥—ñ—è '{event}' –¥–æ–¥–∞–Ω–∞ –Ω–∞ {date}!")
            self.event_entry.delete(0, tk.END)
            self.update_event_list()
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –ø–æ–¥—ñ—é.")

    def show_events(self):
        date = self.cal.get_date()
        self.cursor.execute("SELECT event_description, event_type, completed FROM Events WHERE event_date = ?", (date,))
        events = self.cursor.fetchall()
        if events:
            event_details = "\n".join([f"{event[0]} ({event[1]}) {'‚úîÔ∏è' if event[2] else '‚ùå'}" for event in events])
            messagebox.showinfo("–ü–æ–¥—ñ—ó", f"–ü–æ–¥—ñ—ó –Ω–∞ {date}:\n{event_details}")
        else:
            messagebox.showinfo("–ü–æ–¥—ñ—ó", f"–ù–∞ {date} –Ω–µ–º–∞—î –ø–æ–¥—ñ–π.")

    def remove_event(self):
        selected_event = self.event_list.curselection()
        if selected_event:
            event_info = self.event_list.get(selected_event)
            date = event_info.split(":")[0].strip()
            event_name = event_info.split(":")[1].split("(")[0].strip()

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.cursor.execute("DELETE FROM Events WHERE event_date = ? AND event_description = ?", (date, event_name))
            self.conn.commit()

            self.update_event_list()
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–¥—ñ—è '{event_name}' –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.")
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

    def update_event_list(self):
        self.event_list.delete(0, tk.END)
        self.cursor.execute("SELECT event_date, event_description, event_type, completed FROM Events ORDER BY event_date")
        events = self.cursor.fetchall()
        for event in events:
            date, description, event_type, completed = event
            color = "lightgreen" if event_type == "–ó–≤–∏—á–∞–π–Ω–∞" else "yellow" if event_type == "–í–∞–∂–ª–∏–≤–∞" else "red"
            self.event_list.insert(tk.END, f"{date}: {description} ({event_type}) {'‚úîÔ∏è' if completed else '‚ùå'}")
            self.event_list.itemconfig(tk.END, {'bg': color})

    def edit_event(self):
        selected_event = self.event_list.curselection()
        if selected_event:
            event_info = self.event_list.get(selected_event)
            description = event_info.split(":")[1].split("(")[0].strip()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            event_type = event_info.split("(")[1].split(")")[0].strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è

            self.event_entry.delete(0, tk.END)
            self.event_entry.insert(0, description)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            self.event_type.set(event_type)  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è

            self.selected_event = event_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")

    def save_changes(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        new_description = self.event_entry.get()
        new_event_type = self.event_type.get()

        if hasattr(self, 'selected_event') and self.selected_event:
            old_description = self.selected_event.split(":")[1].split("(")[0].strip()
            old_event_type = self.selected_event.split("(")[1].split(")")[0].strip()
            date = self.selected_event.split(":")[0].strip()

            if new_description != old_description or new_event_type != old_event_type:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                self.cursor.execute("UPDATE Events SET event_description = ?, event_type = ? WHERE event_date = ? AND event_description = ?",
                                    (new_description, new_event_type, date, old_description))
                self.conn.commit()

                self.update_event_list()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–¥—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–û–ø–∏—Å –ø–æ–¥—ñ—ó —Ç–∞ —Ç–∏–ø –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—å.")
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")

    def complete_event(self):
        selected_event = self.event_list.curselection()
        if selected_event:
            event_info = self.event_list.get(selected_event)
            date = event_info.split(":")[0].strip()
            event_name = event_info.split(":")[1].split("(")[0].strip()

            # –ü–æ–º–µ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ
            self.cursor.execute("UPDATE Events SET completed = 1 WHERE event_date = ? AND event_description = ?", (date, event_name))
            self.conn.commit()

            self.update_event_list()
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–¥—ñ—è '{event_name}' –±—É–ª–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")

    def daily_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
        today = datetime.date.today()
        self.cursor.execute("SELECT event_description FROM Events WHERE event_date = ? AND completed = 0", (today,))
        events = self.cursor.fetchall()
        for event in events:
            messagebox.showinfo("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", f"–°—å–æ–≥–æ–¥–Ω—ñ: {event[0]}")

        # –ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        self.root.after(86400000, self.daily_check)

    def hide_window(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.withdraw()  # –°–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
        icon = self.create_icon()
        icon.run()

    def create_icon(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç—Ä–µ—è —Å tooltip"""
        try:
            icon_image = Image.open("C:/Users/Ruslan Ostrovsky/Desktop/kyrsovaya/–∏–∫–æ–Ω–∫–∏/icon1.png")
            icon_image = icon_image.resize((64, 64))  # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥ –∏–∫–æ–Ω–∫—É
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")
            return None

        icon = Icon("ReminderApp", icon_image, menu=Menu(
            MenuItem("–ü–æ–∫–∞–∑–∞—Ç–∏", self.show_window),
            MenuItem("–í–∏–π—Ç–∏", self.quit_app)
        ))

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ tooltip
        icon.tooltip = "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"
        return icon

    def show_window(self, icon):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ"""
        self.root.deiconify()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
        icon.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è

    def quit_app(self, icon):
        """–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.conn.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        icon.stop()  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏
        self.root.quit()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

if __name__ == "__main__":
    root = tk.Tk()
    app = ReminderApp(root)
    root.mainloop()
