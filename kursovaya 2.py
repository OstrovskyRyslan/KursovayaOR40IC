import tkinter as tk
from tkinter import messagebox, ttk
from tkcalendar import Calendar
import datetime
import json
import winsound  # –î–ª—è –∑–≤—É–∫–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

class ReminderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ö–∞–ª–µ–Ω–¥–∞—Ä –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏")
        self.root.geometry("600x700")
        self.root.resizable(False, False)
        self.events = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π
        self.load_events()  # –ó–∞–≥—Ä—É–∂–∞—î–º–æ –ø–æ–¥—ñ—ó –∑ —Ñ–∞–π–ª—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏
        self.is_dark_mode = False  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º - —Å–≤–µ—Ç–ª—ã–π

        # –°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        self.root.configure(bg="#d4e8d4")  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(root, text="üìÖ –ú—ñ–π –ö–∞–ª–µ–Ω–¥–∞—Ä", font=("Helvetica", 20, "bold"), bg="#4CAF50", fg="white")
        header.pack(fill="x", pady=10)  # –î–æ–±–∞–≤–∏–ª–∏ –æ—Ç—Å—Ç—É–ø –≤–Ω–∏–∑

        # –†–∞–º–∫–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±–µ–∑ –±–µ–ª–æ–π –ª–∏–Ω–∏–∏
        self.cal_frame = tk.Frame(root, bg="#d4e8d4")  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é —Ä–∞–º–∫—É
        self.cal_frame.pack(pady=10)  # –î–æ–±–∞–≤–∏–ª–∏ –æ—Ç—Å—Ç—É–ø –≤–Ω–∏–∑
        self.cal = Calendar(
            self.cal_frame, 
            selectmode="day", 
            date_pattern="yyyy-mm-dd",
            locale="uk",  # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
            background="lightblue", 
            foreground="black", 
            bordercolor="lightblue"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç –¥–ª—è –≥—Ä–∞–Ω–∏—Ü—ã
        )
        self.cal.pack()

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        self.today_date = datetime.date.today()
        self.cal.calevent_create(self.today_date, "–°—å–æ–≥–æ–¥–Ω—ñ", "today")

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        self.event_frame = tk.Frame(root, bg="#d4e8d4")
        self.event_frame.pack(pady=10)

        self.event_label = tk.Label(self.event_frame, text="–û–ø–∏—Å –ø–æ–¥—ñ—ó:", font=("Helvetica", 12), bg="#d4e8d4")
        self.event_label.grid(row=0, column=0, padx=5, pady=5)

        self.event_entry = ttk.Entry(self.event_frame, width=30, font=("Helvetica", 12))
        self.event_entry.grid(row=0, column=1, padx=5)
        self.event_entry.insert(0, "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ–¥—ñ—ó")

        # –¢–∏–ø –ø–æ–¥—ñ—ó (–≤–∞–∂–Ω–æ—Å—Ç—å)
        self.event_type_label = tk.Label(self.event_frame, text="–¢–∏–ø –ø–æ–¥—ñ—ó:", font=("Helvetica", 12), bg="#d4e8d4")
        self.event_type_label.grid(row=1, column=0, padx=5, pady=5)

        self.event_type = ttk.Combobox(self.event_frame, values=["–ó–≤–∏—á–∞–π–Ω–∞", "–í–∞–∂–ª–∏–≤–∞", "–¢–µ—Ä–º—ñ–Ω–æ–≤–∞"], font=("Helvetica", 12))
        self.event_type.grid(row=1, column=1, padx=5)
        self.event_type.set("–ó–≤–∏—á–∞–π–Ω–∞")

        # –ö–Ω–æ–ø–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        self.button_frame = tk.Frame(root, bg="#d4e8d4")
        self.button_frame.pack(pady=10)

        self.add_button = ttk.Button(self.button_frame, text="‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é", command=self.add_event)
        self.add_button.grid(row=0, column=0, padx=10, pady=5)

        self.show_button = ttk.Button(self.button_frame, text="üìú –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–¥—ñ—ó", command=self.show_events)
        self.show_button.grid(row=0, column=1, padx=10, pady=5)

        self.remove_button = ttk.Button(self.button_frame, text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é", command=self.remove_event)
        self.remove_button.grid(row=0, column=2, padx=10, pady=5)

        self.edit_button = ttk.Button(self.button_frame, text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—é", command=self.edit_event)
        self.edit_button.grid(row=1, column=0, padx=10, pady=5)

        # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –ø–æ–¥—ñ—ó –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        self.complete_button = ttk.Button(self.button_frame, text="‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ–¥—ñ—é", command=self.complete_event)
        self.complete_button.grid(row=1, column=1, padx=10, pady=5)

        self.save_edit_button = None  # –ú–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏"

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –≤ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å
        self.search_frame = tk.Frame(root, bg="#d4e8d4")
        self.search_frame.pack(pady=10)

        self.search_entry = ttk.Entry(self.search_frame, width=20, font=("Helvetica", 12))
        self.search_entry.grid(row=0, column=0, padx=10)
        self.search_button = ttk.Button(self.search_frame, text="üîç –ü–æ—à—É–∫", command=self.search_event)
        self.search_button.grid(row=0, column=1, padx=10)

        # –°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π
        self.list_frame = tk.Frame(root, bg="#e6ffe6", bd=2, relief="groove")  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
        self.list_frame.pack(fill="both", expand=True, padx=10, pady=10)

        self.list_label = tk.Label(self.list_frame, text="–°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π:", bg="#e6ffe6", font=("Helvetica", 14))
        self.list_label.pack(anchor="nw", padx=5, pady=5)

        self.event_list = tk.Listbox(
            self.list_frame, 
            font=("Helvetica", 12), 
            bg="#f9fff9",  # –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω –¥–ª—è —Å–ø–∏—Å–∫–∞
            selectbackground="#b3ffb3",  # –¶–≤–µ—Ç –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            selectforeground="black", 
            height=10
        )
        self.event_list.pack(fill="both", expand=True, padx=5, pady=5)

        # –í–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.root.after(1000, self.daily_check)

    def add_event(self):
        date = self.cal.get_date()
        event = self.event_entry.get()
        event_type = self.event_type.get()

        if date and event and event.strip() != "":
            if date in self.events:
                self.events[date].append((event, event_type, False))  # False –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–¥—ñ—è –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            else:
                self.events[date] = [(event, event_type, False)]
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–¥—ñ—è '{event}' –¥–æ–¥–∞–Ω–∞ –Ω–∞ {date}!")
            self.event_entry.delete(0, tk.END)
            self.update_event_list()
            self.colorize_calendar()
            self.save_events()
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –ø–æ–¥—ñ—é.")

    def complete_event(self):
        selected_event = self.event_list.curselection()
        if selected_event:
            event_info = self.event_list.get(selected_event)
            date = event_info.split(":")[0].strip()
            event_name = event_info.split(":")[1].split("(")[0].strip()

            # –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥—ñ—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            if date in self.events:
                for idx, (e, et, completed) in enumerate(self.events[date]):
                    if e == event_name and not completed:
                        self.events[date][idx] = (e, et, True)  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                        self.update_event_list()
                        self.colorize_calendar()
                        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–¥—ñ—è '{event_name}' –Ω–∞ {date} –±—É–ª–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞!")
                        self.save_events()
                        break
                else:
                    messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–¶—è –ø–æ–¥—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞.")
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")

    def show_events(self):
        date = self.cal.get_date()
        if date in self.events:
            events = "\n".join([f"{event[0]} ({event[1]}) {'‚úîÔ∏è' if event[2] else '‚ùå'}" for event in self.events[date]])
            messagebox.showinfo("–ü–æ–¥—ñ—ó", f"–ü–æ–¥—ñ—ó –Ω–∞ {date}:\n{events}")
        else:
            messagebox.showinfo("–ü–æ–¥—ñ—ó", f"–ù–∞ {date} –Ω–µ–º–∞—î –ø–æ–¥—ñ–π.")

    def remove_event(self):
        selected_event = self.event_list.curselection()
        if selected_event:
            event_info = self.event_list.get(selected_event)
            date = event_info.split(":")[0].strip()
            event_name = event_info.split(":")[1].split("(")[0].strip()

            if date in self.events:
                self.events[date] = [e for e in self.events[date] if e[0] != event_name]
                self.update_event_list()
                self.colorize_calendar()
                self.save_events()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–¥—ñ—è '{event_name}' –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.")
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

    def edit_event(self):
        selected_event = self.event_list.curselection()
        if selected_event:
            event_info = self.event_list.get(selected_event)
            date = event_info.split(":")[0].strip()
            event_name = event_info.split(":")[1].split("(")[0].strip()
            event_type = event_info.split("(")[1][:-1]

            self.event_entry.delete(0, tk.END)
            self.event_entry.insert(0, event_name)
            self.event_type.set(event_type)

            if self.save_edit_button is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                self.save_edit_button = ttk.Button(self.button_frame, text="–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏", command=lambda: self.save_edited_event(date, event_name))
                self.save_edit_button.grid(row=1, column=2, padx=10, pady=5)
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")

    def save_edited_event(self, date, old_event_name):
        new_event = self.event_entry.get().strip()
        new_event_type = self.event_type.get()

        if new_event != "":
            for idx, (event, event_type, completed) in enumerate(self.events[date]):
                if event == old_event_name:
                    self.events[date][idx] = (new_event, new_event_type, completed)
                    self.update_event_list()
                    self.colorize_calendar()
                    self.save_events()
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–¥—ñ—è '{old_event_name}' –±—É–ª–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ '{new_event}'.")
                    break

    def search_event(self):
        query = self.search_entry.get().strip().lower()
        results = []
        for date, events in self.events.items():
            for event, event_type, completed in events:
                if query in event.lower():
                    results.append(f"{date}: {event} ({event_type}) {'‚úîÔ∏è' if completed else '‚ùå'}")

        if results:
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É", "\n".join(results))
        else:
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É", "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    def daily_check(self):
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        if today in self.events:
            events = "\n".join([f"{event[0]} ({event[1]}) {'‚úîÔ∏è' if event[2] else '‚ùå'}" for event in self.events[today]])
            messagebox.showinfo("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", f"–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –ø–æ–¥—ñ—ó:\n{events}")
            winsound.Beep(1000, 1000)  # –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.root.after(86400000, self.daily_check)

    def update_event_list(self):
        self.event_list.delete(0, tk.END)
        for date, events in sorted(self.events.items()):
            for event, event_type, completed in events:
                color = "lightgreen" if event_type == "–ó–≤–∏—á–∞–π–Ω–∞" else "yellow" if event_type == "–í–∞–∂–ª–∏–≤–∞" else "red"
                self.event_list.insert(tk.END, f"{date}: {event} ({event_type}) {'‚úîÔ∏è' if completed else '‚ùå'}")
                self.event_list.itemconfig(tk.END, {'bg': color})

    def colorize_calendar(self):
        for date, events in self.events.items():
            for event, event_type, completed in events:
                color = "green" if event_type == "–ó–≤–∏—á–∞–π–Ω–∞" else "yellow" if event_type == "–í–∞–∂–ª–∏–≤–∞" else "red"
                self.cal.calevent_create(date, event, event_type)
                self.cal.tag_configure(event_type, background=color)

    def save_events(self):
        with open("events.json", "w", encoding="utf-8") as file:
            json.dump(self.events, file, ensure_ascii=False, indent=4)

    def load_events(self):
        try:
            with open("events.json", "r", encoding="utf-8") as file:
                self.events = json.load(file)
        except FileNotFoundError:
            self.events = {}

if __name__ == "__main__":
    root = tk.Tk()
    app = ReminderApp(root)
    root.mainloop()